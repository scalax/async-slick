package slick.async.jdbc.config

import slick.ast._
import slick.async.jdbc.{ JdbcTypeHelper, OracleProfile }
import slick.async.relational.RelationalProfile
import slick.async.sql.SqlProfile

/** Builder for column specifications in DDL statements. */
abstract class ColumnDDLBuilder(column: FieldSymbol) {
  val sqlUtilsComponent: BasicSqlUtilsComponent

  protected val JdbcTypeHelper(jdbcType, isOption) = column.tpe
  protected var sqlType: String = null
  protected var varying: Boolean = false
  protected var size: Option[Int] = None
  protected var customSqlType: Boolean = false
  protected var notNull = !isOption
  protected var autoIncrement = false
  protected var primaryKey = false
  protected var unique = false
  protected var defaultLiteral: String = null
  init()

  protected def init() {
    for (o <- column.options) handleColumnOption(o)
    if (sqlType ne null) {
      size.foreach(l => sqlType += s"($l)")
      customSqlType = true
    } else sqlType = jdbcType.sqlTypeName(Some(column))
  }

  protected def handleColumnOption(o: ColumnOption[_]): Unit = o match {
    case SqlProfile.ColumnOption.SqlType(s) => sqlType = s
    case RelationalProfile.ColumnOption.Length(s, v) =>
      size = Some(s)
      varying = v
    case SqlProfile.ColumnOption.NotNull => notNull = true
    case SqlProfile.ColumnOption.Nullable => notNull = false
    case ColumnOption.AutoInc => autoIncrement = true
    case ColumnOption.PrimaryKey => primaryKey = true
    case ColumnOption.Unique => unique = true
    case RelationalProfile.ColumnOption.Default(v) => defaultLiteral = JdbcTypeHelper.valueToSQLLiteral(v, column.tpe)
  }

  def appendType(sb: StringBuilder): Unit = sb append sqlType

  def appendColumn(sb: StringBuilder) {
    sb append sqlUtilsComponent.quoteIdentifier(column.name) append ' '
    appendType(sb)
    appendOptions(sb)
  }

  protected def appendOptions(sb: StringBuilder) {
    if (defaultLiteral ne null) sb append " DEFAULT " append defaultLiteral
    if (autoIncrement) sb append " GENERATED BY DEFAULT AS IDENTITY(START WITH 1)"
    if (notNull) sb append " NOT NULL"
    if (primaryKey) sb append " PRIMARY KEY"
    if (unique) sb append " UNIQUE"
  }
}